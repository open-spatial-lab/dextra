{"version":3,"file":"Checkbox.stories-16193952.js","sources":["../../dextra-components/src/components/Checkbox/src/Checkbox.ts","../../node_modules/lit-element/node_modules/lit-html/lib/dom.js","../../node_modules/lit-element/node_modules/lit-html/lib/template.js","../../node_modules/lit-element/node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-element/node_modules/lit-html/lib/directive.js","../../node_modules/lit-element/node_modules/lit-html/lib/part.js","../../node_modules/lit-element/node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-element/node_modules/lit-html/lib/template-result.js","../../node_modules/lit-element/node_modules/lit-html/lib/parts.js","../../node_modules/lit-element/node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-element/node_modules/lit-html/lib/render.js","../../node_modules/lit-element/node_modules/lit-html/lit-html.js","../../node_modules/lit-element/node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js"],"sourcesContent":["import { html } from \"lit\";\nimport { property, customElement } from \"lit/decorators.js\";\nimport { OslControl } from \"../../Interface/src/Interface\";\nimport \"@spectrum-web-components/checkbox/sp-checkbox.js\";\nimport { safeCustomElement } from \"../../core/decorators/safeCustomElement\";\n\n@safeCustomElement(\"osl-checkbox\")\nexport class OslCheckbox extends OslControl {\n  @property({ type: String })\n  size: \"s\" | \"m\" | \"l\" | \"xl\" = \"s\";\n\n  @property({ type: Array })\n  initialValue?: (string | number)[] = [];\n\n  renderSingleBox(i: number) {\n    const options = this.options || [];\n    const storeValue = this.value as Array<string | number>;\n    const option = options[i];\n    const checked = storeValue.includes(option);\n\n    // There is no checked=false and dynamically string interpolating\n    // eg ${checked ? \"checked\" : \"\"} does not work to set initial values\n    // so here we gooooooo\n    \n    if (!checked) {\n      return html`\n        <sp-checkbox\n          size=\"${this.size}\"\n          value=\"${option}\"\n          @change=${() => this.handleChange(option)}\n          >${option}</sp-checkbox\n        >\n      `;\n    } else {\n      return html`\n        <sp-checkbox\n          size=\"${this.size}\"\n          value=\"${option}\"\n          checked\n          @change=${() => this.handleChange(option)}\n          >${option}</sp-checkbox\n        >\n      `;\n    }\n  }\n  renderCheckboxes() {\n    const options = this.options || [];\n    return html` ${options.map((_, i) => this.renderSingleBox(i))} `;\n  };\n\n  eventValueAccessor(value: any) {\n    return value;\n  };\n\n  handleChange(inputValue: any) {\n    const storeValue = this.value as Array<string | number>;\n\n    const newValues = storeValue.includes(inputValue)\n      ? storeValue.filter((option: string | number) => option !== inputValue)\n      : [...storeValue, inputValue];\n    this.store.datasets[this.data].parameters[this.option] = newValues;\n  }\n\n  template() {\n    return html`\n      <div style=\"display:flex; flex-direction: column;\">\n        ${this.renderCheckboxes()}\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"osl-checkbox\": OslCheckbox;\n  }\n}\n","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * Use this module if you want to create your own base class extending\n * [[UpdatingElement]].\n * @packageDocumentation\n */\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a PropertyDeclaration for the property with the given options.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     *\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        const descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n            Object.defineProperty(this.prototype, name, descriptor);\n        }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     *   class MyElement extends LitElement {\n     *     static getPropertyDescriptor(name, key, options) {\n     *       const defaultDescriptor =\n     *           super.getPropertyDescriptor(name, key, options);\n     *       const setter = defaultDescriptor.set;\n     *       return {\n     *         get: defaultDescriptor.get,\n     *         set(value) {\n     *           setter.call(this, value);\n     *           // custom action.\n     *         },\n     *         configurable: true,\n     *         enumerable: true\n     *       }\n     *     }\n     *   }\n     *\n     * @nocollapse\n     */\n    static getPropertyDescriptor(name, key, options) {\n        return {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this\n                    .requestUpdateInternal(name, oldValue, options);\n            },\n            configurable: true,\n            enumerable: true\n        };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a PropertyDeclaration via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override `createProperty`.\n     *\n     * @nocollapse\n     * @final\n     */\n    static getPropertyOptions(name) {\n        return this._classProperties && this._classProperties.get(name) ||\n            defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._updateState = 0;\n        this._updatePromise =\n            new Promise((res) => this._enableUpdatingResolver = res);\n        this._changedProperties = new Map();\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this.requestUpdateInternal();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection.\n        this.enableUpdating();\n    }\n    enableUpdating() {\n        if (this._enableUpdatingResolver !== undefined) {\n            this._enableUpdatingResolver();\n            this._enableUpdatingResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        // Note, hint this as an `AttributeMap` so closure clearly understands\n        // the type; it has issues with tracking types through statics\n        // tslint:disable-next-line:no-unnecessary-type-assertion\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor.getPropertyOptions(propName);\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This protected version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    requestUpdateInternal(name, oldValue, options) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            options = options || ctor.getPropertyOptions(name);\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._updatePromise = this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this.requestUpdateInternal(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await this._updatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        const result = this.performUpdate();\n        // If `performUpdate` returns a Promise, we await it. This is done to\n        // enable coordinating updates with a scheduler. Note, the result is\n        // checked to avoid delaying an additional microtask unless we need to.\n        if (result != null) {\n            await result;\n        }\n        return !this._hasRequestedUpdate;\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Abort any update if one is not pending when this is called.\n        // This can happen if `performUpdate` is called early to \"flush\"\n        // the update.\n        if (!this._hasRequestedUpdate) {\n            return;\n        }\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n            else {\n                this._markUpdated();\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n            throw e;\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n        this._markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `supportsAdoptingStyleSheets` is true then we assume\n            // CSSStyleSheet is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * The main LitElement module, which defines the [[`LitElement`]] base class and\n * related APIs.\n *\n *  LitElement components can define a template and a set of observed\n * properties. Changing an observed property triggers a re-render of the\n * element.\n *\n *  Import [[`LitElement`]] and [[`html`]] from this module to create a\n * component:\n *\n *  ```js\n * import {LitElement, html} from 'lit-element';\n *\n * class MyElement extends LitElement {\n *\n *   // Declare observed properties\n *   static get properties() {\n *     return {\n *       adjective: {}\n *     }\n *   }\n *\n *   constructor() {\n *     this.adjective = 'awesome';\n *   }\n *\n *   // Define the element's template\n *   render() {\n *     return html`<p>your ${adjective} template here</p>`;\n *   }\n * }\n *\n * customElements.define('my-element', MyElement);\n * ```\n *\n * `LitElement` extends [[`UpdatingElement`]] and adds lit-html templating.\n * The `UpdatingElement` class is provided for users that want to build\n * their own custom element base classes that don't use lit-html.\n *\n * @packageDocumentation\n */\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets, unsafeCSS } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.4.0');\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n/**\n * Base element class that manages element properties and attributes, and\n * renders a lit-html template.\n *\n * To define a component, subclass `LitElement` and implement a\n * `render` method to provide the component's template. Define properties\n * using the [[`properties`]] property or the [[`property`]] decorator.\n */\nexport class LitElement extends UpdatingElement {\n    /**\n     * Return the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * @nocollapse\n     */\n    static getStyles() {\n        return this.styles;\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Only gather styles once per class\n        if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n            return;\n        }\n        // Take care not to call `this.getStyles()` multiple times since this\n        // generates new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.getStyles();\n        if (Array.isArray(userStyles)) {\n            // De-duplicate styles preserving the _last_ instance in the set.\n            // This is a performance optimization to avoid duplicated styles that can\n            // occur especially when composing via subclassing.\n            // The last item is kept to try to preserve the cascade order with the\n            // assumption that it's most important that last added styles override\n            // previous styles.\n            const addStyles = (styles, set) => styles.reduceRight((set, s) => \n            // Note: On IE set.add() does not return the set\n            Array.isArray(s) ? addStyles(s, set) : (set.add(s), set), set);\n            // Array.from does not work on Set in IE, otherwise return\n            // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n            const set = addStyles(userStyles, new Set());\n            const styles = [];\n            set.forEach((v) => styles.unshift(v));\n            this._styles = styles;\n        }\n        else {\n            this._styles = userStyles === undefined ? [] : [userStyles];\n        }\n        // Ensure that there are no invalid CSSStyleSheet instances here. They are\n        // invalid in two conditions.\n        // (1) the sheet is non-constructible (`sheet` of a HTMLStyleElement), but\n        //     this is impossible to check except via .replaceSync or use\n        // (2) the ShadyCSS polyfill is enabled (:. supportsAdoptingStyleSheets is\n        //     false)\n        this._styles = this._styles.map((s) => {\n            if (s instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {\n                // Flatten the cssText from the passed constructible stylesheet (or\n                // undetectable non-constructible stylesheet). The user might have\n                // expected to update their stylesheets over time, but the alternative\n                // is a crash.\n                const cssText = Array.prototype.slice.call(s.cssRules)\n                    .reduce((css, rule) => css + rule.cssText, '');\n                return unsafeCSS(cssText);\n            }\n            return s;\n        });\n    }\n    /**\n     * Performs element initialization. By default this calls\n     * [[`createRenderRoot`]] to create the element [[`renderRoot`]] node and\n     * captures any pre-set values for registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.constructor._getUniqueStyles();\n        this.renderRoot = this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the [[`styles`]]\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s instanceof CSSStyleSheet ? s : s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        // Setting properties in `render` should not trigger an update. Since\n        // updates are allowed after super.update, it's important to call `render`\n        // before that.\n        const templateResult = this.render();\n        super.update(changedProperties);\n        // If render is not implemented by the component, don't call lit-html render\n        if (templateResult !== renderNotImplemented) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method may return\n     * any value renderable by lit-html's `NodePart` - typically a\n     * `TemplateResult`. Setting properties inside this method will *not* trigger\n     * the element to update.\n     */\n    render() {\n        return renderNotImplemented;\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Reference to the underlying library method used to render the element's\n * DOM. By default, points to the `render` method from lit-html's shady-render\n * module.\n *\n * **Most users will never need to touch this property.**\n *\n * This  property should not be confused with the `render` instance method,\n * which should be overridden to define a template for the element.\n *\n * Advanced users creating a new base class based on LitElement can override\n * this property to point to a custom render method with a signature that\n * matches [shady-render's `render`\n * method](https://lit-html.polymer-project.org/api/modules/shady_render.html#render).\n *\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map"],"names":["OslCheckbox","OslControl","i","options","storeValue","option","html","_","value","inputValue","newValues","__decorateClass","property","safeCustomElement","isCEPolyfill","removeNodes","container","start","end","n","marker","nodeMarker","markerRegex","boundAttributeSuffix","Template","result","element","nodesToRemove","stack","walker","lastPartIndex","index","partIndex","strings","length","node","attributes","count","endsWith","stringForPart","name","lastAttributeNameRegex","attributeLookupName","attributeValue","statics","data","parent","lastIndex","insert","s","createMarker","match","str","suffix","isTemplatePartActive","part","walkerNodeFilter","removeNodesFromTemplate","template","content","parts","nextActiveIndexInTemplateParts","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","countNodes","startIndex","insertNodeIntoTemplate","refNode","insertCount","walkerIndex","directives","isDirective","o","noChange","nothing","TemplateInstance","processor","values","fragment","policy","commentMarker","TemplateResult","type","l","isCommentBinding","commentOpen","attributeMatch","isPrimitive","isIterable","NodePart","ref","directive","valueAsString","instance","itemParts","itemPart","item","startNode","eventOptionsSupported","templateFactory","templateCache","templateCaches","key","render","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","removeStylesFromLitTemplates","templates","styles","shadyRenderSet","prepareTemplateStyles","renderedDOM","templateElement","condensedStyle","style","removes","hasRendered","needsScoping","firstScopeRender","renderContainer","litRender","_a","prop","_obj","defaultConverter","notEqual","old","defaultPropertyDeclaration","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","finalized","UpdatingElement","v","p","attr","superProperties","k","descriptor","oldValue","superCtor","props","propKeys","attribute","hasChanged","converter","fromAttribute","res","_v","ctor","attrValue","propName","shouldRequestUpdate","shouldUpdate","changedProperties","e","_changedProperties","supportsAdoptingStyleSheets","constructionToken","CSSResult","cssText","safeToken","unsafeCSS","renderNotImplemented","LitElement","userStyles","addStyles","set","css","rule","templateResult"],"mappings":"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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}