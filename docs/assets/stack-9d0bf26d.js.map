{"version":3,"file":"stack-9d0bf26d.js","sources":["../../node_modules/d3-array/src/cumsum.js","../../node_modules/d3-array/src/groupSort.js","../../node_modules/d3-array/src/greatest.js","../../node_modules/@observablehq/plot/src/transforms/identity.js","../../node_modules/@observablehq/plot/src/transforms/stack.js"],"sourcesContent":["export default function cumsum(values, valueof) {\n  var sum = 0, index = 0;\n  return Float64Array.from(values, valueof === undefined\n    ? v => (sum += +v || 0)\n    : v => (sum += +valueof(v, index++, values) || 0));\n}","import ascending from \"./ascending.js\";\nimport group, {rollup} from \"./group.js\";\nimport sort from \"./sort.js\";\n\nexport default function groupSort(values, reduce, key) {\n  return (reduce.length !== 2\n    ? sort(rollup(values, reduce, key), (([ak, av], [bk, bv]) => ascending(av, bv) || ascending(ak, bk)))\n    : sort(group(values, key), (([ak, av], [bk, bv]) => reduce(av, bv) || ascending(ak, bk))))\n    .map(([key]) => key);\n}\n","import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n","import {hasX, hasY, identity} from \"../options.js\";\n\nexport function maybeIdentityX(options = {}) {\n  return hasX(options) ? options : {...options, x: identity};\n}\n\nexport function maybeIdentityY(options = {}) {\n  return hasY(options) ? options : {...options, y: identity};\n}\n","import {InternMap, cumsum, greatest, group, groupSort, max, min, rollup, sum} from \"d3\";\nimport {ascendingDefined, descendingDefined} from \"../defined.js\";\nimport {withTip} from \"../mark.js\";\nimport {maybeApplyInterval, maybeColumn, maybeZ, maybeZero} from \"../options.js\";\nimport {column, field, mid, one, range, valueof} from \"../options.js\";\nimport {basic} from \"./basic.js\";\n\nexport function stackX(stackOptions = {}, options = {}) {\n  if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);\n  const {y1, y = y1, x, ...rest} = options; // note: consumes x!\n  const [transform, Y, x1, x2] = stack(y, x, \"y\", \"x\", stackOptions, rest);\n  return {...transform, y1, y: Y, x1, x2, x: mid(x1, x2)};\n}\n\nexport function stackX1(stackOptions = {}, options = {}) {\n  if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);\n  const {y1, y = y1, x} = options;\n  const [transform, Y, X] = stack(y, x, \"y\", \"x\", stackOptions, options);\n  return {...transform, y1, y: Y, x: X};\n}\n\nexport function stackX2(stackOptions = {}, options = {}) {\n  if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);\n  const {y1, y = y1, x} = options;\n  const [transform, Y, , X] = stack(y, x, \"y\", \"x\", stackOptions, options);\n  return {...transform, y1, y: Y, x: X};\n}\n\nexport function stackY(stackOptions = {}, options = {}) {\n  if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);\n  const {x1, x = x1, y, ...rest} = options; // note: consumes y!\n  const [transform, X, y1, y2] = stack(x, y, \"x\", \"y\", stackOptions, rest);\n  return {...transform, x1, x: X, y1, y2, y: mid(y1, y2)};\n}\n\nexport function stackY1(stackOptions = {}, options = {}) {\n  if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);\n  const {x1, x = x1, y} = options;\n  const [transform, X, Y] = stack(x, y, \"x\", \"y\", stackOptions, options);\n  return {...transform, x1, x: X, y: Y};\n}\n\nexport function stackY2(stackOptions = {}, options = {}) {\n  if (arguments.length === 1) [stackOptions, options] = mergeOptions(stackOptions);\n  const {x1, x = x1, y} = options;\n  const [transform, X, , Y] = stack(x, y, \"x\", \"y\", stackOptions, options);\n  return {...transform, x1, x: X, y: Y};\n}\n\nexport function maybeStackX({x, x1, x2, ...options} = {}) {\n  options = withTip(options, \"y\");\n  if (x1 === undefined && x2 === undefined) return stackX({x, ...options});\n  [x1, x2] = maybeZero(x, x1, x2);\n  return {...options, x1, x2};\n}\n\nexport function maybeStackY({y, y1, y2, ...options} = {}) {\n  options = withTip(options, \"x\");\n  if (y1 === undefined && y2 === undefined) return stackY({y, ...options});\n  [y1, y2] = maybeZero(y, y1, y2);\n  return {...options, y1, y2};\n}\n\n// The reverse option is ambiguous: it is both a stack option and a basic\n// transform. If only one options object is specified, we interpret it as a\n// stack option, and therefore must remove it from the propagated options.\nfunction mergeOptions(options) {\n  const {offset, order, reverse, ...rest} = options;\n  return [{offset, order, reverse}, rest];\n}\n\n// This is a hint to the tooltip mark that the y1 and y2 channels (for stackY,\n// or conversely x1 and x2 for stackX) represent a stacked length, and that the\n// tooltip should therefore show y2-y1 instead of an extent.\nconst lengthy = {length: true};\n\nfunction stack(x, y = one, kx, ky, {offset, order, reverse}, options) {\n  const z = maybeZ(options);\n  const [X, setX] = maybeColumn(x);\n  const [Y1, setY1] = column(y);\n  const [Y2, setY2] = column(y);\n  Y1.hint = Y2.hint = lengthy;\n  offset = maybeOffset(offset);\n  order = maybeOrder(order, offset, ky);\n  return [\n    basic(options, (data, facets, plotOptions) => {\n      const X = x == null ? undefined : setX(maybeApplyInterval(valueof(data, x), plotOptions?.[kx]));\n      const Y = valueof(data, y, Float64Array);\n      const Z = valueof(data, z);\n      const compare = order && order(data, X, Y, Z);\n      const n = data.length;\n      const Y1 = setY1(new Float64Array(n));\n      const Y2 = setY2(new Float64Array(n));\n      const facetstacks = [];\n      for (const facet of facets) {\n        const stacks = X ? Array.from(group(facet, (i) => X[i]).values()) : [facet];\n        if (compare) for (const stack of stacks) stack.sort(compare);\n        for (const stack of stacks) {\n          let yn = 0;\n          let yp = 0;\n          if (reverse) stack.reverse();\n          for (const i of stack) {\n            const y = Y[i];\n            if (y < 0) yn = Y2[i] = (Y1[i] = yn) + y;\n            else if (y > 0) yp = Y2[i] = (Y1[i] = yp) + y;\n            else Y2[i] = Y1[i] = yp; // NaN or zero\n          }\n        }\n        facetstacks.push(stacks);\n      }\n      if (offset) offset(facetstacks, Y1, Y2, Z);\n      return {data, facets};\n    }),\n    X,\n    Y1,\n    Y2\n  ];\n}\n\nfunction maybeOffset(offset) {\n  if (offset == null) return;\n  if (typeof offset === \"function\") return offset;\n  switch (`${offset}`.toLowerCase()) {\n    case \"expand\":\n    case \"normalize\":\n      return offsetExpand;\n    case \"center\":\n    case \"silhouette\":\n      return offsetCenter;\n    case \"wiggle\":\n      return offsetWiggle;\n  }\n  throw new Error(`unknown offset: ${offset}`);\n}\n\n// Given a single stack, returns the minimum and maximum values from the given\n// Y2 column. Note that this relies on Y2 always being the outer column for\n// diverging values.\nfunction extent(stack, Y2) {\n  let min = 0,\n    max = 0;\n  for (const i of stack) {\n    const y = Y2[i];\n    if (y < min) min = y;\n    if (y > max) max = y;\n  }\n  return [min, max];\n}\n\nfunction offsetExpand(facetstacks, Y1, Y2) {\n  for (const stacks of facetstacks) {\n    for (const stack of stacks) {\n      const [yn, yp] = extent(stack, Y2);\n      for (const i of stack) {\n        const m = 1 / (yp - yn || 1);\n        Y1[i] = m * (Y1[i] - yn);\n        Y2[i] = m * (Y2[i] - yn);\n      }\n    }\n  }\n}\n\nfunction offsetCenter(facetstacks, Y1, Y2) {\n  for (const stacks of facetstacks) {\n    for (const stack of stacks) {\n      const [yn, yp] = extent(stack, Y2);\n      for (const i of stack) {\n        const m = (yp + yn) / 2;\n        Y1[i] -= m;\n        Y2[i] -= m;\n      }\n    }\n    offsetZero(stacks, Y1, Y2);\n  }\n  offsetCenterFacets(facetstacks, Y1, Y2);\n}\n\nfunction offsetWiggle(facetstacks, Y1, Y2, Z) {\n  for (const stacks of facetstacks) {\n    const prev = new InternMap();\n    let y = 0;\n    for (const stack of stacks) {\n      let j = -1;\n      const Fi = stack.map((i) => Math.abs(Y2[i] - Y1[i]));\n      const Df = stack.map((i) => {\n        j = Z ? Z[i] : ++j;\n        const value = Y2[i] - Y1[i];\n        const diff = prev.has(j) ? value - prev.get(j) : 0;\n        prev.set(j, value);\n        return diff;\n      });\n      const Cf1 = [0, ...cumsum(Df)];\n      for (const i of stack) {\n        Y1[i] += y;\n        Y2[i] += y;\n      }\n      const s1 = sum(Fi);\n      if (s1) y -= sum(Fi, (d, i) => (Df[i] / 2 + Cf1[i]) * d) / s1;\n    }\n    offsetZero(stacks, Y1, Y2);\n  }\n  offsetCenterFacets(facetstacks, Y1, Y2);\n}\n\nfunction offsetZero(stacks, Y1, Y2) {\n  const m = min(stacks, (stack) => min(stack, (i) => Y1[i]));\n  for (const stack of stacks) {\n    for (const i of stack) {\n      Y1[i] -= m;\n      Y2[i] -= m;\n    }\n  }\n}\n\nfunction offsetCenterFacets(facetstacks, Y1, Y2) {\n  const n = facetstacks.length;\n  if (n === 1) return;\n  const facets = facetstacks.map((stacks) => stacks.flat());\n  const m = facets.map((I) => (min(I, (i) => Y1[i]) + max(I, (i) => Y2[i])) / 2);\n  const m0 = min(m);\n  for (let j = 0; j < n; j++) {\n    const p = m0 - m[j];\n    for (const i of facets[j]) {\n      Y1[i] += p;\n      Y2[i] += p;\n    }\n  }\n}\n\nfunction maybeOrder(order, offset, ky) {\n  if (order === undefined && offset === offsetWiggle) return orderInsideOut(ascendingDefined);\n  if (order == null) return;\n  if (typeof order === \"string\") {\n    const negate = order.startsWith(\"-\");\n    const compare = negate ? descendingDefined : ascendingDefined;\n    switch ((negate ? order.slice(1) : order).toLowerCase()) {\n      case \"value\":\n      case ky:\n        return orderY(compare);\n      case \"z\":\n        return orderZ(compare);\n      case \"sum\":\n        return orderSum(compare);\n      case \"appearance\":\n        return orderAppearance(compare);\n      case \"inside-out\":\n        return orderInsideOut(compare);\n    }\n    return orderAccessor(field(order));\n  }\n  if (typeof order === \"function\") return (order.length === 1 ? orderAccessor : orderComparator)(order);\n  if (Array.isArray(order)) return orderGiven(order);\n  throw new Error(`invalid order: ${order}`);\n}\n\n// by value\nfunction orderY(compare) {\n  return (data, X, Y) => (i, j) => compare(Y[i], Y[j]);\n}\n\n// by location\nfunction orderZ(compare) {\n  return (data, X, Y, Z) => (i, j) => compare(Z[i], Z[j]);\n}\n\n// by sum of value (a.k.a. “ascending”)\nfunction orderSum(compare) {\n  return orderZDomain(compare, (data, X, Y, Z) =>\n    groupSort(\n      range(data),\n      (I) => sum(I, (i) => Y[i]),\n      (i) => Z[i]\n    )\n  );\n}\n\n// by x = argmax of value\nfunction orderAppearance(compare) {\n  return orderZDomain(compare, (data, X, Y, Z) =>\n    groupSort(\n      range(data),\n      (I) => X[greatest(I, (i) => Y[i])],\n      (i) => Z[i]\n    )\n  );\n}\n\n// by x = argmax of value, but rearranged inside-out by alternating series\n// according to the sign of a running divergence of sums\nfunction orderInsideOut(compare) {\n  return orderZDomain(compare, (data, X, Y, Z) => {\n    const I = range(data);\n    const K = groupSort(\n      I,\n      (I) => X[greatest(I, (i) => Y[i])],\n      (i) => Z[i]\n    );\n    const sums = rollup(\n      I,\n      (I) => sum(I, (i) => Y[i]),\n      (i) => Z[i]\n    );\n    const Kp = [],\n      Kn = [];\n    let s = 0;\n    for (const k of K) {\n      if (s < 0) {\n        s += sums.get(k);\n        Kp.push(k);\n      } else {\n        s -= sums.get(k);\n        Kn.push(k);\n      }\n    }\n    return Kn.reverse().concat(Kp);\n  });\n}\n\nfunction orderAccessor(f) {\n  return (data) => {\n    const O = valueof(data, f);\n    return (i, j) => ascendingDefined(O[i], O[j]);\n  };\n}\n\nfunction orderComparator(f) {\n  return (data) => (i, j) => f(data[i], data[j]);\n}\n\nfunction orderGiven(domain) {\n  return orderZDomain(ascendingDefined, () => domain);\n}\n\n// Given an ordering (domain) of distinct values in z that can be derived from\n// the data, returns a comparator that can be used to sort stacks. Note that\n// this is a series order: it will be consistent across stacks.\nfunction orderZDomain(compare, domain) {\n  return (data, X, Y, Z) => {\n    if (!Z) throw new Error(\"missing channel: z\");\n    const map = new InternMap(domain(data, X, Y, Z).map((d, i) => [d, i]));\n    return (i, j) => compare(map.get(Z[i]), map.get(Z[j]));\n  };\n}\n"],"names":["cumsum","values","valueof","sum","index","v","groupSort","reduce","key","sort","rollup","ak","av","bk","bv","ascending","group","greatest","compare","max","defined","maxValue","element","value","maybeIdentityX","options","hasX","identity","maybeIdentityY","hasY","stackX","stackOptions","mergeOptions","y1","y","x","rest","transform","Y","x1","x2","stack","mid","stackY","X","y2","maybeStackX","withTip","maybeZero","maybeStackY","offset","order","reverse","lengthy","one","kx","ky","z","maybeZ","setX","maybeColumn","Y1","setY1","column","Y2","setY2","maybeOffset","maybeOrder","basic","data","facets","plotOptions","maybeApplyInterval","Z","n","facetstacks","facet","stacks","i","yn","yp","offsetExpand","offsetCenter","offsetWiggle","extent","min","m","offsetZero","offsetCenterFacets","prev","InternMap","j","Fi","Df","diff","Cf1","s1","d","I","m0","p","orderInsideOut","ascendingDefined","negate","descendingDefined","orderY","orderZ","orderSum","orderAppearance","orderAccessor","field","orderComparator","orderGiven","orderZDomain","range","K","sums","Kp","Kn","s","k","f","O","domain","map"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}