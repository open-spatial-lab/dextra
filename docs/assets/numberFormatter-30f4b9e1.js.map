{"version":3,"file":"numberFormatter-30f4b9e1.js","sources":["../../dextra-components/src/components/core/utils/numberFormatter.ts"],"sourcesContent":["\nconst presets = {\n  nice: {\n    notation: 'compact',\n  },\n  scientific: {\n    notation: 'scientific',\n    maximumFractionDigits: 2,\n  },\n  full: {\n    notation: 'standard',\n    maximumFractionDigits: 2,\n  },\n  percent: {\n    style: 'percent',\n    maximumFractionDigits: 2,\n  }\n} as const\n\n\ntype CurrencyPreset = `currency:${string}`\nexport type FormatterPresets = keyof typeof presets | CurrencyPreset\n\nexport const getFormatterPreset = (preset: FormatterPresets) => {\n  if (preset.startsWith('currency')) {\n    const currency = preset.split(':')[1]\n    return {\n      style: 'currency',\n      currency,\n    }\n  } \n  if (presets.hasOwnProperty(preset)) {\n    return presets[preset as keyof typeof presets]\n  }\n  return presets.full\n}\n\n\nexport const getFormatter = (type: FormatterPresets, overrides: Intl.NumberFormatOptions = {}) => {\n  return new Intl.NumberFormat(\"en-US\", {\n    ...getFormatterPreset(type),\n    ...overrides,\n  })\n}"],"names":["presets","getFormatterPreset","preset","getFormatter","type","overrides"],"mappings":"AACA,MAAMA,EAAU,CACd,KAAM,CACJ,SAAU,SACZ,EACA,WAAY,CACV,SAAU,aACV,sBAAuB,CACzB,EACA,KAAM,CACJ,SAAU,WACV,sBAAuB,CACzB,EACA,QAAS,CACP,MAAO,UACP,sBAAuB,CACzB,CACF,EAMaC,EAAsBC,GAC7BA,EAAO,WAAW,UAAU,EAEvB,CACL,MAAO,WACP,SAHeA,EAAO,MAAM,GAAG,EAAE,CAAC,CAGlC,EAGAF,EAAQ,eAAeE,CAAM,EACxBF,EAAQE,CAA8B,EAExCF,EAAQ,KAIJG,EAAe,CAACC,EAAwBC,EAAsC,KAClF,IAAI,KAAK,aAAa,QAAS,CACpC,GAAGJ,EAAmBG,CAAI,EAC1B,GAAGC,CAAA,CACJ"}